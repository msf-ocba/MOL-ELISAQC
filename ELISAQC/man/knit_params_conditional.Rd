% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/knit_params_conditional.R
\name{knit_params_conditional}
\alias{knit_params_conditional}
\title{Conditional knit params ask}
\usage{
knit_params_conditional(
  file = NULL,
  input_lines = NULL,
  params = NULL,
  shiny_args = NULL,
  save_caption = "Save",
  encoding = "UTF-8"
)
}
\arguments{
\item{file}{Path to the R Markdown document with configurable parameters.}

\item{input_lines}{Content of the R Markdown document. If \code{NULL}, the contents of \code{file} will be read.}

\item{params}{A named list of optional parameter overrides used in place of the document defaults.}

\item{shiny_args}{Additional arguments to \code{\link[shiny:runApp]{runApp}}.}

\item{save_caption}{Caption to use use for button that saves/confirms parameters.}

\item{encoding}{Ignored. The encoding is always assumed to be UTF-8.}
}
\value{
named list with overridden parameter names and value.
}
\description{
This function replaces the native \code{rmarkdown::knit_params_ask()} function with a
conditional version that will hide some parameters if not needed based on the user's response.
}
\details{
For full details, see the help files for the native knit_params_ask function in the
rmarkdown package.  To use, add the term 'condition' to a parameter in the YAML header
of an R markdown file and then specify what the condition is (response from another parameter).
}
\examples{
\dontrun{
# Create YAML header with conditions:
--
params:
  datasource:
    input: radio
    label: "Select data source type:"
    choices: [file, SQL]
    value: "SQL"
 rawdata:
   input: file
   label: "Select raw data file:"
   multiple: FALSE
   accept: ".xlsx"
   placeholder: "Choose file"
   value: ""
   condition: "input.datasource == 'file'"
--

# Replace rmarkdown::knit_params_ask with knit_params_conditional:
untrace(rmarkdown::knit_params_ask)
trace(rmarkdown::knit_params_ask,
      edit = function(name = name,
                      file = file,
                      title = title){fingertipsHPI::knit_params_conditional})

# Make a call to render with the revised function:
rmarkdown::render(appDir, params = "ask", clean = FALSE)

# Untrace the conditional function to return to the original:
untrace(rmarkdown::knit_params_conditional)
}
}
\author{
Cong Chen (Cong.Chen@phe.gov.uk)
}
